#!/bin/bash

# Fail immediately on non-zero exit code.
set -e
# Fail immediately on non-zero exit code within a pipeline.
set -o pipefail
# Fail on undeclared variables.
set -u
# Debug, echo every command
#set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
KAFKACAT_BUILD_DIR=${BUILD_DIR}/kafkacat-binary

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

#
# This build is based off of the kafkacat bootstrap.sh script:
#
#   https://github.com/edenhill/kafkacat/blob/master/bootstrap.sh
#

function github_download {
    repo=$1
    version=$2
    dir=$3

    url=https://github.com/${repo}/archive/${version}.tar.gz

    if [[ -d $dir ]]; then
        echo "Directory $dir already exists, not downloading $url" | indent
        return 0
    fi

    echo "Downloading $url to $dir" | indent
    if which wget 2>&1 > /dev/null; then
        DL='wget -q -O-'
    else
        DL='curl -s -L'
    fi

    mkdir -p "$dir"
    pushd "$dir" > /dev/null
    ($DL "$url" | tar -xzf - --strip-components 1) || exit 1
    popd > /dev/null
}

function build {
    dir=$1
    cmds=$2


    echo ""
    topic "Building $dir..."

    pushd $dir > /dev/null
    set +o errexit
    eval $cmds
    ret=$?
    set -o errexit
    popd > /dev/null

    if [[ $ret == 0 ]]; then
        echo "Build of $dir SUCCEEDED!" | indent
    else 
        echo "Build of $dir FAILED!"| indent
    fi

    return $ret
}

function pkg_cfg_lib {
    pkg=$1

    local libs=$(PKG_CONFIG_PATH=$KAFKACAT_BUILD_DIR/usr/local/lib/pkgconfig pkg-config --libs --static $pkg)

    # If pkg-config isnt working try grabbing the library list manually.
    if [[ -z "$libs" ]]; then
        libs=$(grep ^Libs.private $KAFKACAT_BUILD_DIR/usr/local/lib/pkgconfig/${pkg}.pc | sed -e s'/^Libs.private: //g')
    fi

    # Since we specify the exact .a files to link further down below
    # we need to remove the -l<libname> here.
    libs=$(echo $libs | sed -e "s/-l${pkg}//g")
    echo " $libs"

    # >&2 echo "Using $libs for $pkg" | indent
}


mkdir -p $KAFKACAT_BUILD_DIR
pushd $KAFKACAT_BUILD_DIR > /dev/null

topic "Installing kafkacat dependencies..."

github_download "edenhill/librdkafka" "master" "librdkafka"
#github_download "lloyd/yajl" "master" "libyajl"

build librdkafka "([ -f config.h ] || ./configure >> build.log) && make >> build.log && make DESTDIR=\"${PWD}/\" install >> build.log" || (echo "Failed to build librdkafka: bootstrap failed" | indent ; false)

#build libyajl "([ -f config.h ] || ./configure >> build.log) && make >> build.log && make DESTDIR=\"${PWD}/\" install >> build.log" || (echo "Failed to build libyajl: JSON support will probably be disabled" | indent ; true)

popd > /dev/null

cd $BUILD_DIR

echo ""
topic "Building kafkacat"

export CPPFLAGS="${CPPFLAGS:-} -I$KAFKACAT_BUILD_DIR/usr/local/include"
# $(pkg_cfg_lib yajl)
export LIBS="$(pkg_cfg_lib rdkafka)"
export STATIC_LIB_rdkafka="$KAFKACAT_BUILD_DIR/usr/local/lib/librdkafka.a"
# export STATIC_LIB_yajl="$KAFKACAT_BUILD_DIR/usr/local/lib/libyajl_s.a"
./configure --prefix=$KAFKACAT_BUILD_DIR --enable-static --enable-json >> build.log
make >> build.log



